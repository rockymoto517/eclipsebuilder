export default class t{constructor(e){this.baseStats=new Map(t.definedBaseStats),this.builder=e}get armorCore(){let e=this.baseStats.get("armor");for(const s of this.getModifiersOf("armMod"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("armBonus"))s+=t.calculate(e);return e*s}get armorFromHealth(){const e=this.healthCore;let s=0;for(const e of this.getModifiersOf("armorFromHealthRatio"))s+=t.calculate(e);return e*s}get netArmor(){const e=this.armorCore;let s=1;for(const e of this.getModifiersOf("armBonus"))s+=t.calculate(e);let i=1;for(const e of this.getModifiersOf("armorToHealth"))i+=t.calculate(e);return(e+this.armorFromHealth*s)*i}get healthCore(){let e=this.baseStats.get("health");for(const s of this.getModifiersOf("healthFromArmor"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("healthBonus"))s+=t.calculate(e);for(const e of this.getModifiersOf("healthToArmor"))s+=t.calculate(e);return e*s}get netHealth(){const e=this.healthCore;let s=1;for(const e of this.getModifiersOf("healthFrenzy"))s+=t.calculate(e);return e*s}get netDodge(){let e=this.baseStats.get("dodge");for(const s of this.getModifiersOf("dodgeMod"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("dodgeBonus"))s+=t.calculate(e);return e*s}get netSpeed(){let e=this.baseStats.get("speed");for(const s of this.getModifiersOf("speedMod"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("speedBonus"))s+=t.calculate(e);return e*s}get netConcealment(){let e=this.baseStats.get("concealment");for(const s of this.getModifiersOf("concealmentMod"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("concealmentBonus"))s+=t.calculate(e);return e*s}getModifiersOf(t){return this.modifiers.filter((e=>e.part==t))}get modifiers(){const e=[],s=this.builder.dbs.get("perk_decks").get(this.builder.exp.perkDeck),i=this.builder.dbs.get("perk_cards"),o=this.builder.exp.skills,r=this.builder.exp.armor,a=this.builder.dbs.get("skills");if(s){const o=s.perks.map((t=>i.get(t))).filter((t=>void 0!==t.stats));for(const s of o)e.push(...s.stats.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e))))}if("copycat"===this.builder.exp.perkDeck){const s=Array.from(i.values()).filter((t=>void 0!==t.is_copycat_boost&&t.is_copycat_boost));for(const i of[this.builder.exp.copycat.tactical_reload,this.builder.exp.copycat.head_games,this.builder.exp.copycat.is_this_your_bullet,this.builder.exp.copycat.grace_period])void 0!==s[i].stats&&e.push(...s[i].stats.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e))));const o=Array.from(i.values()).filter((t=>void 0!==t.copycat_mimicry_available&&t.copycat_mimicry_available))[this.builder.exp.copycat.mimicry];void 0!==o.copycat_stats?e.push(...o.copycat_stats.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e)))):void 0!==o.stats&&e.push(...o.stats.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e))))}s&&s.stats;for(const[s,{state:i}]of o){const o=a.get(s);o.stats&&(o.stats.basic&&e.push(...o.stats.basic.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e)))),1!=i&&o.stats.ace&&e.push(...o.stats.ace.filter((e=>!t.isBlacklisted(r,e)&&t.isWhitelisted(r,e)))))}const l=[];for(const{overrides:t}of e)t&&l.push(...t);return e.filter((({id:t})=>!l.includes(t)))}setBaseStats(t){for(const e in t)this.baseStats.set(e,t[e])}getStats(...t){const e=[];for(const[s,i]of t){const t=s.substring(0,1),o=`net${s.replace(t,t.toUpperCase())}`;o in this?e.push([s,this[o]]):e.push([s,i])}return e}static isWhitelisted(t,{whitelist:e}){return!t||!e||e.includes(t)}static isBlacklisted(t,{blacklist:e}){return t&&e&&e.includes(t)}static calculate(t){if(!t.exec)return t.value;const e=[];for(const s of t.arguments)e.push(this[s]);return t.exec(...e)}}t.definedBaseStats=[["health",230]];
